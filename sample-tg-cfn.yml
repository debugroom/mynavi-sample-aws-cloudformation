AWSTemplateFormatVersion: '2010-09-09'

Description: Sample CloudFormation template with YAML - ALB Target group.  Depends On sample-vpc-cfn.yml, sample-sg-cfn.yml, sample-alb-cfn.yml.

Mappings:
  TargetGroupDefinitionMap:
    FrontendWebApp:
      "PathPattern": "/frontend/*"
      "HealthCheckPath": "/frontend/index.html"
      "Priority": 1
    BackendServiceA:
      "PathPattern": "/backend/serviceA/*"
      "HealthCheckPath": "/index.html"
      "Priority": 1
    BackendServiceB:
      "PathPattern": "/backend/serviceB/*"
      "HealthCheckPath": "/index.html"
      "Priority": 2
  DeployEnvironmentMap:
    Production:
      "Protocol": "HTTPS"
      "Port": 443
    Staging:
      "Protocol": "HTTPS"
      "Port": 443
    Dev:
      "Protocol": "HTTP"
      "Port": 80

Parameters:
  VPCName:
    Description: Target VPC Name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: mynavi-sample-cloudformation-vpc
  SubnetType:
    Description: Which subnet to deploy your service.
    Type: String
    AllowedValues: ["Frontend", "Backend"]
    Default: Backend
  EnvType:
    Description: Which environments to deploy your service.
    Type: String
    AllowedValues: ["Dev", "Staging", "Production"]
    Default: Dev
  ServiceName:
    Description: Deploy service name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: BackendServiceA

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvType}-${ServiceName}-tg
      VpcId:
        Fn::ImportValue: !Sub ${VPCName}-VPCID
      Port: !FindInMap [DeployEnvironmentMap, !Ref EnvType, Port]
      Protocol: !FindInMap [DeployEnvironmentMap, !Ref EnvType, Protocol]
      HealthCheckPath: !FindInMap [TargetGroupDefinitionMap, !Ref ServiceName, HealthCheckPath]
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - !FindInMap [TargetGroupDefinitionMap, !Ref ServiceName, PathPattern]
      ListenerArn:
        Fn::ImportValue: !Sub ${VPCName}-${SubnetType}-ALB-Listener
      Priority: !FindInMap [TargetGroupDefinitionMap, !Ref ServiceName, Priority]

Outputs:
  TargetGroup:
    Description: TargetGroup Service
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${VPCName}-${SubnetType}-${ServiceName}
